#include "d3d9_magic.h"
#include "CaptureHook.h"
#include "Extern.h"
#include <d3d9.h>
#include <Windows.h>

bool CompareMemory(const LPVOID lpVal1, const LPVOID lpVal2, UINT nBytes)
{
	__try
	{
		return memcmp(lpVal1, lpVal2, nBytes) == 0;
	}
	__except (GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION)
	{
		return false;
	}

	return false;
}

#ifdef _WIN64
#define NUM_KNOWN_PATCHES 14
#define PATCH_COMPARE_SIZE 13
#else
#define NUM_KNOWN_PATCHES 14
#define PATCH_COMPARE_SIZE 12
#endif


#ifdef _WIN64
h3d::PTR patch_offsets[NUM_KNOWN_PATCHES] = {/*0x4B55F,*/ 0x54FE6, 0x55095, 0x550C5, 0x6FE18, 0x70050, 0x703F8, 0x7E49C, 0x8BDB5, 0x8E635, 0x90352, 0x9038A, 0x93AFA, 0x93B8A, 0x1841E5 };
BYTE patch_compare[NUM_KNOWN_PATCHES][PATCH_COMPARE_SIZE] =
{
	//{0x48, 0x8b, 0x81, 0xc8, 0x38, 0x00, 0x00, 0x39, 0x98, 0x68, 0x50, 0x00, 0x00},  //winvis - 6.0.6002.18005
	{ 0x48, 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x39, 0x98, 0x68, 0x50, 0x00, 0x00 },  //win7   - 6.1.7600.16385
	{ 0x48, 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x39, 0x98, 0x68, 0x50, 0x00, 0x00 },  //win7   - 6.1.7601.16562
	{ 0x48, 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x39, 0x98, 0x68, 0x50, 0x00, 0x00 },  //win7   - 6.1.7601.17514
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0x98, 0x88, 0x51, 0x00, 0x00 },  //win10  - 10.0.10240.16412
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0x98, 0x88, 0x51, 0x00, 0x00 },  //win10  - 10.0.10240.16384
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0x98, 0x88, 0x51, 0x00, 0x00 },  //win10  - 10.0.10162.0
	{ 0x8b, 0x81, 0x18, 0x3e, 0x00, 0x00, 0x44, 0x39, 0x98, 0x88, 0x51, 0x00, 0x00 },  //win10  - 10.0.10586.0
	{ 0x48, 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x39, 0xB0, 0x28, 0x51, 0x00, 0x00 },  //win8.1 - 6.3.9431.00000
	{ 0x48, 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x39, 0xA8, 0x28, 0x51, 0x00, 0x00 },  //win8.1 - 6.3.9600.17415
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0xA0, 0x28, 0x51, 0x00, 0x00 },  //win8.1 - 6.3.9600.17085
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0xA0, 0x28, 0x51, 0x00, 0x00 },  //win8.1 - 6.3.9600.17095
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0xA0, 0x28, 0x51, 0x00, 0x00 },  //win8.1 - 6.3.9600.16384
	{ 0x8b, 0x81, 0xb8, 0x3d, 0x00, 0x00, 0x44, 0x39, 0xA0, 0x28, 0x51, 0x00, 0x00 },  //win8.1 - 6.3.9600.16404
	{ 0x49, 0x8b, 0x85, 0xb8, 0x3d, 0x00, 0x00, 0x39, 0x88, 0xc8, 0x50, 0x00, 0x00 },  //win8   - 6.2.9200.16384
};

#else

h3d::PTR patch_offsets[NUM_KNOWN_PATCHES] = {/*0x4BDA1,*/ 0x79AA6, 0x79C9E, 0x79D96, 0x7F9BD, 0x8A3F4, 0x8B15F, 0x8B19F, 0x8B83F, 0x8E9F7, 0x8F00F, 0x8FBB1, 0x90264, 0x90C57, 0x166A08 };
BYTE patch_compare[NUM_KNOWN_PATCHES][PATCH_COMPARE_SIZE] =
{
	//{0x8b, 0x89, 0x6c, 0x27, 0x00, 0x00, 0x39, 0xb9, 0x80, 0x4b, 0x00, 0x00},  //winvis - 6.0.6002.18005
	{ 0x8b, 0x89, 0xe8, 0x29, 0x00, 0x00, 0x39, 0xb9, 0x80, 0x4b, 0x00, 0x00 },  //win7   - 6.1.7601.16562
	{ 0x8b, 0x89, 0xe8, 0x29, 0x00, 0x00, 0x39, 0xb9, 0x80, 0x4b, 0x00, 0x00 },  //win7   - 6.1.7600.16385
	{ 0x8b, 0x89, 0xe8, 0x29, 0x00, 0x00, 0x39, 0xb9, 0x80, 0x4b, 0x00, 0x00 },  //win7   - 6.1.7601.17514
	{ 0x8b, 0x80, 0xe8, 0x29, 0x00, 0x00, 0x39, 0xb0, 0x40, 0x4c, 0x00, 0x00 },  //win8.1 - 6.3.9431.00000
	{ 0x80, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0x40, 0x4c, 0x00, 0x00, 0x00 },  //win8.1 - 6.3.9600.16404
	{ 0x81, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0xa0, 0x4c, 0x00, 0x00, 0x00 },  //win10  - 10.0.10240.16384
	{ 0x81, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0xa0, 0x4c, 0x00, 0x00, 0x00 },  //win10  - 10.0.10162.0
	{ 0x81, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0xa0, 0x4c, 0x00, 0x00, 0x00 },  //win10  - 10.0.10240.16412
	{ 0x80, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0x40, 0x4c, 0x00, 0x00, 0x00 },  //win8.1 - 6.3.9600.17095
	{ 0x80, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0x40, 0x4c, 0x00, 0x00, 0x00 },  //win8.1 - 6.3.9600.17085
	{ 0x80, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0x40, 0x4c, 0x00, 0x00, 0x00 },  //win8.1 - 6.3.9600.16384
	{ 0x87, 0xe8, 0x29, 0x00, 0x00, 0x83, 0xb8, 0x40, 0x4c, 0x00, 0x00, 0x00 },  //win8.1 - 6.3.9600.17415
	{ 0x81, 0x18, 0x2a, 0x00, 0x00, 0x83, 0xb8, 0xa0, 0x4c, 0x00, 0x00, 0x00 },  //win10  - 10.0.10586.0
	{ 0x8b, 0x80, 0xe8, 0x29, 0x00, 0x00, 0x39, 0x90, 0xb0, 0x4b, 0x00, 0x00 },  //win8   - 6.2.9200.16384
};
#endif

static int patch_type = 0;

int GetD3D9PatchType(void* d3d9_moduleaddress)
{
	LPBYTE lpBaseAddress = reinterpret_cast<LPBYTE>(d3d9_moduleaddress);
	for (int i = 0; i<NUM_KNOWN_PATCHES; i++)
	{
		if (CompareMemory(lpBaseAddress + patch_offsets[i], patch_compare[i], PATCH_COMPARE_SIZE))
			return i + 1;
	}

	return 0;
}

bool h3d::D3D9PatchTypeSupportSharedTexture(void* module_address) {
	return (patch_type=GetD3D9PatchType(module_address)) != 0;
}


void * D3D9PatchAddress(void * module_address)
{
	if (patch_type)
	{
		return reinterpret_cast<LPBYTE>(module_address) +patch_offsets[patch_type - 1] + PATCH_COMPARE_SIZE;
	}
	return NULL;
}

struct PatchInfo {
	size_t patchSize;
	const BYTE* patchData;
};

#define NEWPACTH(x) {sizeof(x),(x)}

#ifdef _WIN64
static const BYTE forceJump[] = { 0xEB };
static const BYTE ignoreJump[] = { 0x90, 0x90 };
PatchInfo patch[NUM_KNOWN_PATCHES] =
{
	//{0xEB, 0x12},
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
};
#else
static const BYTE forceJump[] = { 0xEB };
static const BYTE ignoreJump[] = { 0x90, 0x90 };

PatchInfo patch[NUM_KNOWN_PATCHES] =
{
	//{0xEB, 0x02},
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(forceJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(ignoreJump),
	NEWPACTH(forceJump),
};
#endif

BYTE* save_data = NULL;

DWORD dwOldProtect;
size_t patch_size;

void h3d::BeginD3D9Patch(void * module_address)
{
	LPBYTE patchAddress = (patch_type != 0) ? (LPBYTE)D3D9PatchAddress(module_address) : NULL;

	if (patchAddress)
	{
		patch_size = patch[patch_type - 1].patchSize;
		save_data = (BYTE*)malloc(patch_size);
		if (VirtualProtect(patchAddress, patch_size, PAGE_EXECUTE_READWRITE, &dwOldProtect))
		{
			memcpy(save_data, patchAddress, patch_size);
			memcpy(patchAddress, patch[patch_type - 1].patchData, patch_size);
		}
		else
		{
			logstream << "DoD3D9GPUHook: unable to change memory protection" <<std::endl;
		}
	}
}

void h3d::EndD3D9Patch(void * module_address)
{
	LPBYTE patchAddress = (patch_type != 0) ? (LPBYTE)D3D9PatchAddress(module_address) : NULL;
	if (patchAddress) {
		memcpy(patchAddress, save_data, patch_size);
		VirtualProtect(patchAddress, patch_size, dwOldProtect, &dwOldProtect);
	}

	if (save_data) {
		free(save_data);
		save_data = NULL;
	}
}


